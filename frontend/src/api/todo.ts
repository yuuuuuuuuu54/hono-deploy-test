/**
 * Generated by orval v7.7.0 🍺
 * Do not edit manually.
 * Todo API
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import { axiosInstance } from "../axiosInstance";
export interface Todo {
  id: string;
  title: string;
  completed: boolean;
}

export type Todos = Todo[];

export type PostTodoBody = {
  title: string;
  completed: boolean;
};

export const getTodos = (signal?: AbortSignal) => {
  return axiosInstance<Todos>({ url: `/todos`, method: "GET", signal });
};

export const getGetTodosQueryKey = () => {
  return [`/todos`] as const;
};

export const getGetTodosQueryOptions = <
  TData = Awaited<ReturnType<typeof getTodos>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getTodos>>, TError, TData>
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetTodosQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getTodos>>> = ({
    signal,
  }) => getTodos(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getTodos>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetTodosQueryResult = NonNullable<
  Awaited<ReturnType<typeof getTodos>>
>;
export type GetTodosQueryError = unknown;

export function useGetTodos<
  TData = Awaited<ReturnType<typeof getTodos>>,
  TError = unknown,
>(options: {
  query: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getTodos>>, TError, TData>
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getTodos>>,
        TError,
        Awaited<ReturnType<typeof getTodos>>
      >,
      "initialData"
    >;
}): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetTodos<
  TData = Awaited<ReturnType<typeof getTodos>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getTodos>>, TError, TData>
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getTodos>>,
        TError,
        Awaited<ReturnType<typeof getTodos>>
      >,
      "initialData"
    >;
}): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetTodos<
  TData = Awaited<ReturnType<typeof getTodos>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getTodos>>, TError, TData>
  >;
}): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useGetTodos<
  TData = Awaited<ReturnType<typeof getTodos>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getTodos>>, TError, TData>
  >;
}): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetTodosQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const postTodo = (postTodoBody: PostTodoBody, signal?: AbortSignal) => {
  return axiosInstance<Todo>({
    url: `/todo`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: postTodoBody,
    signal,
  });
};

export const getPostTodoMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postTodo>>,
    TError,
    { data: PostTodoBody },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postTodo>>,
  TError,
  { data: PostTodoBody },
  TContext
> => {
  const mutationKey = ["postTodo"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postTodo>>,
    { data: PostTodoBody }
  > = (props) => {
    const { data } = props ?? {};

    return postTodo(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostTodoMutationResult = NonNullable<
  Awaited<ReturnType<typeof postTodo>>
>;
export type PostTodoMutationBody = PostTodoBody;
export type PostTodoMutationError = unknown;

export const usePostTodo = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postTodo>>,
    TError,
    { data: PostTodoBody },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postTodo>>,
  TError,
  { data: PostTodoBody },
  TContext
> => {
  const mutationOptions = getPostTodoMutationOptions(options);

  return useMutation(mutationOptions);
};
