/**
 * Generated by orval v7.7.0 üç∫
 * Do not edit manually.
 * Todo API
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import * as axios from 'axios';
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios';

export interface Todo {
  id: string;
  title: string;
  completed: boolean;
}

export type Todos = Todo[];

export type PostTodoBody = {
  title: string;
  completed: boolean;
};

export const getTodos = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<Todos>> => {
    
    
    return axios.default.get(
      `http://localhost:8787/todos`,options
    );
  }


export const getGetTodosQueryKey = () => {
    return [`http://localhost:8787/todos`] as const;
    }

    
export const getGetTodosQueryOptions = <TData = Awaited<ReturnType<typeof getTodos>>, TError = AxiosError<unknown>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTodos>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTodosQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTodos>>> = ({ signal }) => getTodos({ signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTodos>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetTodosQueryResult = NonNullable<Awaited<ReturnType<typeof getTodos>>>
export type GetTodosQueryError = AxiosError<unknown>


export function useGetTodos<TData = Awaited<ReturnType<typeof getTodos>>, TError = AxiosError<unknown>>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTodos>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTodos>>,
          TError,
          Awaited<ReturnType<typeof getTodos>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetTodos<TData = Awaited<ReturnType<typeof getTodos>>, TError = AxiosError<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTodos>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTodos>>,
          TError,
          Awaited<ReturnType<typeof getTodos>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetTodos<TData = Awaited<ReturnType<typeof getTodos>>, TError = AxiosError<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTodos>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetTodos<TData = Awaited<ReturnType<typeof getTodos>>, TError = AxiosError<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTodos>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetTodosQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const postTodo = (
    postTodoBody: PostTodoBody, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<Todo>> => {
    
    
    return axios.default.post(
      `http://localhost:8787/todo`,
      postTodoBody,options
    );
  }



export const getPostTodoMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTodo>>, TError,{data: PostTodoBody}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postTodo>>, TError,{data: PostTodoBody}, TContext> => {
    
const mutationKey = ['postTodo'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postTodo>>, {data: PostTodoBody}> = (props) => {
          const {data} = props ?? {};

          return  postTodo(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostTodoMutationResult = NonNullable<Awaited<ReturnType<typeof postTodo>>>
    export type PostTodoMutationBody = PostTodoBody
    export type PostTodoMutationError = AxiosError<unknown>

    export const usePostTodo = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTodo>>, TError,{data: PostTodoBody}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof postTodo>>,
        TError,
        {data: PostTodoBody},
        TContext
      > => {

      const mutationOptions = getPostTodoMutationOptions(options);

      return useMutation(mutationOptions);
    }
